buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'curseforge'
apply plugin: 'forge'

ext.buildProps = file "build.properties"

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

def curseFile = file 'curse.properties'
def doCurse = curseFile.exists()

if (doCurse) {
    curseFile.withReader {
        def prop = new Properties()
        prop.load(it)
        ext.curseProps = new ConfigSlurper().parse prop
    }
}

group = "sticksandstones"
archivesBaseName = "SticksAndStones"
version = "${config.version.minecraft}-${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}"

if (System.getenv("BUILD_NUMBER") != null) {
    version += ".${System.getenv("BUILD_NUMBER")}"
}

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}"
    runDir = "run"

    replaceIn "sticksandstones/reference/Reference.java"
    replace "@MAJOR@", config.version.mod.major
    replace "@MINOR@", config.version.mod.minor
    replace "@REVIS@", config.version.mod.revis
}

curse {
    doFirst {
        println("Curse.properties found, uploading to curse!")
        apiKey = "${curseProps.api_token}"
        projectId = "${curseProps.project_id}"

        releaseType = ""
        changelog = """"""
    }
}

task checkCurse() << {
    if (!doCurse) {
        throw new GradleException("No curse.properties file specified, This task shoudln't be used!")
    }
}

repositories {
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
    maven {
        name 'CB Repo'
        url "http://chickenbones.net/maven"
    }

}

dependencies {

}


processResources {

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        expand 'version':project.version,'mc_version':config.minecraft_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task sourceJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task apiZip(type: Zip) {
    classifier = 'api'
    from sourceSets*.allSource
    include 'sticksandstones/api/**'
}

artifacts {
    archives deobfJar
    archives apiZip
    archives sourceJar
}

curse.dependsOn checkCurse
